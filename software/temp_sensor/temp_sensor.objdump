
temp_sensor.elf:     file format elf32-littlenios2
temp_sensor.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001728 memsz 0x00001728 flags r-x
    LOAD off    0x00002748 vaddr 0x00009748 paddr 0x00009840 align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x00002938 vaddr 0x00009938 paddr 0x00009938 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00002840  2**0
                  CONTENTS
  2 .text         00001448  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002e0  00009468  00009468  00002468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f8  00009748  00009840  00002748  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00009938  00009938  00002938  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00009948  00009948  00002840  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000350  00000000  00000000  00002880  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000426e  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001744  00000000  00000000  00006e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001ce2  00000000  00000000  00008582  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000790  00000000  00000000  0000a264  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000144b  00000000  00000000  0000a9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001136  00000000  00000000  0000be3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000cf78  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  0000cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000e50c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000e50f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000e51b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000e51c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000e51d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000e528  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000e533  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0000e53e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000005e  00000000  00000000  0000e548  2**0
                  CONTENTS, READONLY
 26 .jdi          00004180  00000000  00000000  0000e5a6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00051a16  00000000  00000000  00012726  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00009468 l    d  .rodata	00000000 .rodata
00009748 l    d  .rwdata	00000000 .rwdata
00009938 l    d  .bss	00000000 .bss
00009948 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../temp_sensor_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 ondie_temp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008268 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00009748 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008988 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008ac4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00008c24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_modular_adc.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000927c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00008e70 g     F .text	0000004c adc_stop
00008ba8 g     F .text	0000004c alt_main
00009840 g       *ABS*	00000000 __flash_rwdata_start
0000821c g     F .text	0000004c printf
00009418 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00009018 g     F .text	00000040 adc_interrupt_disable
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009938 g     O .bss	00000004 errno
00008df0 g     F .text	00000034 altera_modular_adc_init
00009940 g     O .bss	00000004 alt_argv
00011828 g       *ABS*	00000000 _gp
00008bf4 g     F .text	00000030 usleep
0000936c g     F .text	00000090 alt_find_dev
000081b8 g     F .text	00000028 memcpy
00008f2c g     F .text	00000038 adc_set_mode_run_continuously
000081e0 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008a8c g     F .text	00000008 .hidden __udivsi3
00009834 g     O .rwdata	00000008 altera_modular_adc_list
00009828 g     O .rwdata	00000004 _global_impure_ptr
00009948 g       *ABS*	00000000 __bss_end
000090d4 g     F .text	00000038 adc_wait_for_interrupt
00008ef0 g     F .text	0000003c adc_set_mode_run_once
00009260 g     F .text	0000001c alt_dcache_flush_all
00009840 g       *ABS*	00000000 __ram_rwdata_end
00008c74 g     F .text	00000098 write
00009748 g       *ABS*	00000000 __ram_rodata_end
00009830 g     O .rwdata	00000004 jtag_uart_0
00008ebc g     F .text	00000034 adc_start
00008a94 g     F .text	00000008 .hidden __umodsi3
00009948 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008d5c g     F .text	00000094 altera_avalon_jtag_uart_write
000082d4 g     F .text	00000570 ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008d40 g     F .text	0000001c alt_sys_init
00008a9c g     F .text	00000028 .hidden __mulsi3
00009748 g       *ABS*	00000000 __ram_rwdata_start
00009468 g       *ABS*	00000000 __ram_rodata_start
0000910c g     F .text	00000154 alt_busy_sleep
00009438 g     F .text	00000030 memcmp
00009948 g       *ABS*	00000000 __alt_stack_base
00008160 g     F .text	00000058 celsius_lookup
00008fdc g     F .text	0000003c adc_interrupt_enable
000092cc g     F .text	000000a0 alt_dev_llist_insert
00008868 g     F .text	000000ac __sfvwrite_small_dev
00009938 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000104 main
00009944 g     O .bss	00000004 alt_envp
0000983c g     O .rwdata	00000004 alt_errno
000089f8 g     F .text	00000048 .hidden __divsi3
00009468 g       *ABS*	00000000 __flash_rodata_start
00008d0c g     F .text	00000034 alt_irq_init
00008930 g     F .text	00000058 _write_r
0000982c g     O .rwdata	00000004 _impure_ptr
0000993c g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009840 g       *ABS*	00000000 _edata
00009948 g       *ABS*	00000000 _end
00009094 g     F .text	00000040 adc_interrupt_asserted
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009058 g     F .text	0000003c adc_clear_interrupt_status
00008a40 g     F .text	0000004c .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008e24 g     F .text	0000004c altera_modular_adc_open
0000800c g       .entry	00000000 _exit
00008914 g     F .text	0000001c strlen
00008f64 g     F .text	00000078 adc_recalibrate
000093fc g     F .text	0000001c alt_icache_flush_all
00008844 g     F .text	00000024 __vfprintf_internal
00008b28 g     F .text	00000080 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6860a14 	ori	gp,gp,6184
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a64e14 	ori	r2,r2,39224

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e65214 	ori	r3,r3,39240

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff681c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008b280 	call	8b28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008ba80 	call	8ba8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff6830>

0000805c <main>:


alt_u8 celsius_lookup(int adc_avg_in);

int main()
{
    805c:	defffa04 	addi	sp,sp,-24
    8060:	dfc00515 	stw	ra,20(sp)
    8064:	df000415 	stw	fp,16(sp)
    8068:	df000404 	addi	fp,sp,16

	int switch_datain;

	volatile int adc_avg=0 ,i;
    806c:	e03ffe15 	stw	zero,-8(fp)
	printf("*******PIO and On-Die Temp Sensor example********\nChange Switches 1,2, and 3 to change LEDs 1,2 and 3\nThe value of ADC Channel connected to Temperature Sensing Diode is collected every second and is averaged over 64 Samples\n------------------------------------------------------------------------------------------------------");
    8070:	01000074 	movhi	r4,1
    8074:	21251a04 	addi	r4,r4,-27544
    8078:	000821c0 	call	821c <printf>


	//Starting the ADC sequencer
	IOWR(MODULAR_ADC_0_SEQUENCER_CSR_BASE, 0, 0);
    807c:	0007883a 	mov	r3,zero
    8080:	00800074 	movhi	r2,1
    8084:	10849604 	addi	r2,r2,4696
    8088:	10c00035 	stwio	r3,0(r2)
	usleep(10);
    808c:	01000284 	movi	r4,10
    8090:	0008bf40 	call	8bf4 <usleep>
	IOWR(MODULAR_ADC_0_SEQUENCER_CSR_BASE, 0, 1);
    8094:	00c00044 	movi	r3,1
    8098:	00800074 	movhi	r2,1
    809c:	10849604 	addi	r2,r2,4696
    80a0:	10c00035 	stwio	r3,0(r2)
	adc_recalibrate(MODULAR_ADC_0_SEQUENCER_CSR_BASE);
    80a4:	01000074 	movhi	r4,1
    80a8:	21049604 	addi	r4,r4,4696
    80ac:	0008f640 	call	8f64 <adc_recalibrate>
	//Event loop never exits
	while(1)
	{
		// Reads the value from Switch and Displays in the LED
		switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SW_IO_BASE);
    80b0:	00800074 	movhi	r2,1
    80b4:	10849004 	addi	r2,r2,4672
    80b8:	10800037 	ldwio	r2,0(r2)
    80bc:	e0bffc15 	stw	r2,-16(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_IO_BASE,switch_datain);
    80c0:	00800074 	movhi	r2,1
    80c4:	10848804 	addi	r2,r2,4640
    80c8:	e0fffc17 	ldw	r3,-16(fp)
    80cc:	10c00035 	stwio	r3,0(r2)
		//Giving a 1 Second delay
		usleep(1000000);
    80d0:	010003f4 	movhi	r4,15
    80d4:	21109004 	addi	r4,r4,16960
    80d8:	0008bf40 	call	8bf4 <usleep>

		adc_avg=0;
    80dc:	e03ffe15 	stw	zero,-8(fp)
		//Getting an average of 64 samples
		//__builtin_ldwio (((void *)(((alt_u8*)(1)) + (i * 4))))
		for (i=0;i<6;i++)
    80e0:	e03fff15 	stw	zero,-4(fp)
    80e4:	00000d06 	br	811c <main+0xc0>
		{
			int adc_value=IORD(MODULAR_ADC_0_SAMPLE_STORE_CSR_USE_TSD,i);
    80e8:	e0bfff17 	ldw	r2,-4(fp)
    80ec:	1085883a 	add	r2,r2,r2
    80f0:	1085883a 	add	r2,r2,r2
    80f4:	10800044 	addi	r2,r2,1
    80f8:	10800037 	ldwio	r2,0(r2)
    80fc:	e0bffd15 	stw	r2,-12(fp)
			adc_avg=adc_avg+adc_value;
    8100:	e0fffe17 	ldw	r3,-8(fp)
    8104:	e0bffd17 	ldw	r2,-12(fp)
    8108:	1885883a 	add	r2,r3,r2
    810c:	e0bffe15 	stw	r2,-8(fp)
		usleep(1000000);

		adc_avg=0;
		//Getting an average of 64 samples
		//__builtin_ldwio (((void *)(((alt_u8*)(1)) + (i * 4))))
		for (i=0;i<6;i++)
    8110:	e0bfff17 	ldw	r2,-4(fp)
    8114:	10800044 	addi	r2,r2,1
    8118:	e0bfff15 	stw	r2,-4(fp)
    811c:	e0bfff17 	ldw	r2,-4(fp)
    8120:	10800190 	cmplti	r2,r2,6
    8124:	103ff01e 	bne	r2,zero,80e8 <_gp+0xffff68c0>
		{
			int adc_value=IORD(MODULAR_ADC_0_SAMPLE_STORE_CSR_USE_TSD,i);
			adc_avg=adc_avg+adc_value;
		}
		//printf("\curr adc_avg value =%d",adc_avg);
		printf("\nOn-die temperature = %d",(celsius_lookup(adc_avg/64-3417)-40));
    8128:	e0bffe17 	ldw	r2,-8(fp)
    812c:	1000010e 	bge	r2,zero,8134 <main+0xd8>
    8130:	10800fc4 	addi	r2,r2,63
    8134:	1005d1ba 	srai	r2,r2,6
    8138:	10bca9c4 	addi	r2,r2,-3417
    813c:	1009883a 	mov	r4,r2
    8140:	00081600 	call	8160 <celsius_lookup>
    8144:	10803fcc 	andi	r2,r2,255
    8148:	10bff604 	addi	r2,r2,-40
    814c:	01000074 	movhi	r4,1
    8150:	21256c04 	addi	r4,r4,-27216
    8154:	100b883a 	mov	r5,r2
    8158:	000821c0 	call	821c <printf>
	}
    815c:	003fd406 	br	80b0 <_gp+0xffff6888>

00008160 <celsius_lookup>:




alt_u8 celsius_lookup(int adc_avg_in)
{
    8160:	deff9d04 	addi	sp,sp,-396
    8164:	dfc06215 	stw	ra,392(sp)
    8168:	df006115 	stw	fp,388(sp)
    816c:	df006104 	addi	fp,sp,388
    8170:	e13fff15 	stw	r4,-4(fp)
	 const alt_u8 celsius_lookup_table[383]={
    8174:	00800074 	movhi	r2,1
    8178:	10a57244 	addi	r2,r2,-27191
    817c:	e13f9f04 	addi	r4,fp,-388
    8180:	1007883a 	mov	r3,r2
    8184:	00805fc4 	movi	r2,383
    8188:	180b883a 	mov	r5,r3
    818c:	100d883a 	mov	r6,r2
    8190:	00081b80 	call	81b8 <memcpy>
			 33,32,31,31,30,30,29,29,28,28,27,27,26,26,25,24,24,23,23,22,22,21,21,20,
			 20,19,18,18,17,17,16,16,15,15,14,13,13,12,12,11,11,10, 9, 9, 8, 8, 7, 7,
			  6, 5, 5, 4, 4, 3, 2, 2, 1, 1, 0 };

	//printf("temp = %d",adc_avg_in);
	return (celsius_lookup_table[adc_avg_in]);
    8194:	e0bfff17 	ldw	r2,-4(fp)
    8198:	e0ff9f04 	addi	r3,fp,-388
    819c:	1885883a 	add	r2,r3,r2
    81a0:	10800003 	ldbu	r2,0(r2)

}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

000081b8 <memcpy>:
    81b8:	2005883a 	mov	r2,r4
    81bc:	0007883a 	mov	r3,zero
    81c0:	19800626 	beq	r3,r6,81dc <memcpy+0x24>
    81c4:	28c9883a 	add	r4,r5,r3
    81c8:	21c00003 	ldbu	r7,0(r4)
    81cc:	10c9883a 	add	r4,r2,r3
    81d0:	18c00044 	addi	r3,r3,1
    81d4:	21c00005 	stb	r7,0(r4)
    81d8:	003ff906 	br	81c0 <_gp+0xffff6998>
    81dc:	f800283a 	ret

000081e0 <_printf_r>:
    81e0:	defffd04 	addi	sp,sp,-12
    81e4:	dfc00015 	stw	ra,0(sp)
    81e8:	d9800115 	stw	r6,4(sp)
    81ec:	d9c00215 	stw	r7,8(sp)
    81f0:	20800217 	ldw	r2,8(r4)
    81f4:	280d883a 	mov	r6,r5
    81f8:	21400217 	ldw	r5,8(r4)
    81fc:	00c00074 	movhi	r3,1
    8200:	18e21a04 	addi	r3,r3,-30616
    8204:	10c00115 	stw	r3,4(r2)
    8208:	d9c00104 	addi	r7,sp,4
    820c:	00082d40 	call	82d4 <___vfprintf_internal_r>
    8210:	dfc00017 	ldw	ra,0(sp)
    8214:	dec00304 	addi	sp,sp,12
    8218:	f800283a 	ret

0000821c <printf>:
    821c:	defffc04 	addi	sp,sp,-16
    8220:	dfc00015 	stw	ra,0(sp)
    8224:	d9400115 	stw	r5,4(sp)
    8228:	d9800215 	stw	r6,8(sp)
    822c:	d9c00315 	stw	r7,12(sp)
    8230:	00800074 	movhi	r2,1
    8234:	10a60b04 	addi	r2,r2,-26580
    8238:	10800017 	ldw	r2,0(r2)
    823c:	200b883a 	mov	r5,r4
    8240:	01000074 	movhi	r4,1
    8244:	21221a04 	addi	r4,r4,-30616
    8248:	10c00217 	ldw	r3,8(r2)
    824c:	d9800104 	addi	r6,sp,4
    8250:	19000115 	stw	r4,4(r3)
    8254:	11000217 	ldw	r4,8(r2)
    8258:	00088440 	call	8844 <__vfprintf_internal>
    825c:	dfc00017 	ldw	ra,0(sp)
    8260:	dec00404 	addi	sp,sp,16
    8264:	f800283a 	ret

00008268 <print_repeat>:
    8268:	defffb04 	addi	sp,sp,-20
    826c:	dc800315 	stw	r18,12(sp)
    8270:	dc400215 	stw	r17,8(sp)
    8274:	dc000115 	stw	r16,4(sp)
    8278:	dfc00415 	stw	ra,16(sp)
    827c:	2025883a 	mov	r18,r4
    8280:	2823883a 	mov	r17,r5
    8284:	d9800005 	stb	r6,0(sp)
    8288:	3821883a 	mov	r16,r7
    828c:	04000a0e 	bge	zero,r16,82b8 <print_repeat+0x50>
    8290:	88800117 	ldw	r2,4(r17)
    8294:	9009883a 	mov	r4,r18
    8298:	880b883a 	mov	r5,r17
    829c:	d80d883a 	mov	r6,sp
    82a0:	01c00044 	movi	r7,1
    82a4:	103ee83a 	callr	r2
    82a8:	843fffc4 	addi	r16,r16,-1
    82ac:	103ff726 	beq	r2,zero,828c <_gp+0xffff6a64>
    82b0:	00bfffc4 	movi	r2,-1
    82b4:	00000106 	br	82bc <print_repeat+0x54>
    82b8:	0005883a 	mov	r2,zero
    82bc:	dfc00417 	ldw	ra,16(sp)
    82c0:	dc800317 	ldw	r18,12(sp)
    82c4:	dc400217 	ldw	r17,8(sp)
    82c8:	dc000117 	ldw	r16,4(sp)
    82cc:	dec00504 	addi	sp,sp,20
    82d0:	f800283a 	ret

000082d4 <___vfprintf_internal_r>:
    82d4:	deffe304 	addi	sp,sp,-116
    82d8:	d8c00804 	addi	r3,sp,32
    82dc:	df001b15 	stw	fp,108(sp)
    82e0:	ddc01a15 	stw	r23,104(sp)
    82e4:	dd801915 	stw	r22,100(sp)
    82e8:	dd401815 	stw	r21,96(sp)
    82ec:	dd001715 	stw	r20,92(sp)
    82f0:	dcc01615 	stw	r19,88(sp)
    82f4:	dc801515 	stw	r18,84(sp)
    82f8:	dc401415 	stw	r17,80(sp)
    82fc:	dc001315 	stw	r16,76(sp)
    8300:	dfc01c15 	stw	ra,112(sp)
    8304:	2025883a 	mov	r18,r4
    8308:	2823883a 	mov	r17,r5
    830c:	3839883a 	mov	fp,r7
    8310:	d9800f15 	stw	r6,60(sp)
    8314:	0021883a 	mov	r16,zero
    8318:	d8000e15 	stw	zero,56(sp)
    831c:	002b883a 	mov	r21,zero
    8320:	002f883a 	mov	r23,zero
    8324:	0029883a 	mov	r20,zero
    8328:	0027883a 	mov	r19,zero
    832c:	d8000c15 	stw	zero,48(sp)
    8330:	d8000b15 	stw	zero,44(sp)
    8334:	002d883a 	mov	r22,zero
    8338:	d8c00915 	stw	r3,36(sp)
    833c:	d8c00f17 	ldw	r3,60(sp)
    8340:	19000003 	ldbu	r4,0(r3)
    8344:	20803fcc 	andi	r2,r4,255
    8348:	1080201c 	xori	r2,r2,128
    834c:	10bfe004 	addi	r2,r2,-128
    8350:	10012c26 	beq	r2,zero,8804 <___vfprintf_internal_r+0x530>
    8354:	00c00044 	movi	r3,1
    8358:	b0c01426 	beq	r22,r3,83ac <___vfprintf_internal_r+0xd8>
    835c:	1d800216 	blt	r3,r22,8368 <___vfprintf_internal_r+0x94>
    8360:	b0000626 	beq	r22,zero,837c <___vfprintf_internal_r+0xa8>
    8364:	00012306 	br	87f4 <___vfprintf_internal_r+0x520>
    8368:	01400084 	movi	r5,2
    836c:	b1401d26 	beq	r22,r5,83e4 <___vfprintf_internal_r+0x110>
    8370:	014000c4 	movi	r5,3
    8374:	b1402b26 	beq	r22,r5,8424 <___vfprintf_internal_r+0x150>
    8378:	00011e06 	br	87f4 <___vfprintf_internal_r+0x520>
    837c:	01400944 	movi	r5,37
    8380:	11410b26 	beq	r2,r5,87b0 <___vfprintf_internal_r+0x4dc>
    8384:	88800117 	ldw	r2,4(r17)
    8388:	d9000005 	stb	r4,0(sp)
    838c:	880b883a 	mov	r5,r17
    8390:	9009883a 	mov	r4,r18
    8394:	d80d883a 	mov	r6,sp
    8398:	01c00044 	movi	r7,1
    839c:	103ee83a 	callr	r2
    83a0:	1000e61e 	bne	r2,zero,873c <___vfprintf_internal_r+0x468>
    83a4:	84000044 	addi	r16,r16,1
    83a8:	00011206 	br	87f4 <___vfprintf_internal_r+0x520>
    83ac:	01400c04 	movi	r5,48
    83b0:	11410826 	beq	r2,r5,87d4 <___vfprintf_internal_r+0x500>
    83b4:	01400944 	movi	r5,37
    83b8:	11400a1e 	bne	r2,r5,83e4 <___vfprintf_internal_r+0x110>
    83bc:	d8800005 	stb	r2,0(sp)
    83c0:	88800117 	ldw	r2,4(r17)
    83c4:	9009883a 	mov	r4,r18
    83c8:	880b883a 	mov	r5,r17
    83cc:	d80d883a 	mov	r6,sp
    83d0:	b00f883a 	mov	r7,r22
    83d4:	103ee83a 	callr	r2
    83d8:	1000d81e 	bne	r2,zero,873c <___vfprintf_internal_r+0x468>
    83dc:	84000044 	addi	r16,r16,1
    83e0:	00010306 	br	87f0 <___vfprintf_internal_r+0x51c>
    83e4:	25bff404 	addi	r22,r4,-48
    83e8:	b5803fcc 	andi	r22,r22,255
    83ec:	00c00244 	movi	r3,9
    83f0:	1d800936 	bltu	r3,r22,8418 <___vfprintf_internal_r+0x144>
    83f4:	00bfffc4 	movi	r2,-1
    83f8:	98800426 	beq	r19,r2,840c <___vfprintf_internal_r+0x138>
    83fc:	9809883a 	mov	r4,r19
    8400:	01400284 	movi	r5,10
    8404:	0008a9c0 	call	8a9c <__mulsi3>
    8408:	00000106 	br	8410 <___vfprintf_internal_r+0x13c>
    840c:	0005883a 	mov	r2,zero
    8410:	15a7883a 	add	r19,r2,r22
    8414:	0000f006 	br	87d8 <___vfprintf_internal_r+0x504>
    8418:	01400b84 	movi	r5,46
    841c:	1140f226 	beq	r2,r5,87e8 <___vfprintf_internal_r+0x514>
    8420:	05800084 	movi	r22,2
    8424:	213ff404 	addi	r4,r4,-48
    8428:	20c03fcc 	andi	r3,r4,255
    842c:	01000244 	movi	r4,9
    8430:	20c00b36 	bltu	r4,r3,8460 <___vfprintf_internal_r+0x18c>
    8434:	00bfffc4 	movi	r2,-1
    8438:	a0800626 	beq	r20,r2,8454 <___vfprintf_internal_r+0x180>
    843c:	a009883a 	mov	r4,r20
    8440:	01400284 	movi	r5,10
    8444:	d8c01115 	stw	r3,68(sp)
    8448:	0008a9c0 	call	8a9c <__mulsi3>
    844c:	d8c01117 	ldw	r3,68(sp)
    8450:	00000106 	br	8458 <___vfprintf_internal_r+0x184>
    8454:	0005883a 	mov	r2,zero
    8458:	10e9883a 	add	r20,r2,r3
    845c:	0000e506 	br	87f4 <___vfprintf_internal_r+0x520>
    8460:	00c01b04 	movi	r3,108
    8464:	10c0de26 	beq	r2,r3,87e0 <___vfprintf_internal_r+0x50c>
    8468:	013fffc4 	movi	r4,-1
    846c:	a100021e 	bne	r20,r4,8478 <___vfprintf_internal_r+0x1a4>
    8470:	05000044 	movi	r20,1
    8474:	00000106 	br	847c <___vfprintf_internal_r+0x1a8>
    8478:	d8000b15 	stw	zero,44(sp)
    847c:	01001a44 	movi	r4,105
    8480:	11001526 	beq	r2,r4,84d8 <___vfprintf_internal_r+0x204>
    8484:	20800916 	blt	r4,r2,84ac <___vfprintf_internal_r+0x1d8>
    8488:	010018c4 	movi	r4,99
    848c:	11009426 	beq	r2,r4,86e0 <___vfprintf_internal_r+0x40c>
    8490:	01001904 	movi	r4,100
    8494:	11001026 	beq	r2,r4,84d8 <___vfprintf_internal_r+0x204>
    8498:	01001604 	movi	r4,88
    849c:	1100d41e 	bne	r2,r4,87f0 <___vfprintf_internal_r+0x51c>
    84a0:	00c00044 	movi	r3,1
    84a4:	d8c00e15 	stw	r3,56(sp)
    84a8:	00001406 	br	84fc <___vfprintf_internal_r+0x228>
    84ac:	01001cc4 	movi	r4,115
    84b0:	1100a426 	beq	r2,r4,8744 <___vfprintf_internal_r+0x470>
    84b4:	20800316 	blt	r4,r2,84c4 <___vfprintf_internal_r+0x1f0>
    84b8:	01001bc4 	movi	r4,111
    84bc:	1100d326 	beq	r2,r4,880c <___vfprintf_internal_r+0x538>
    84c0:	0000cb06 	br	87f0 <___vfprintf_internal_r+0x51c>
    84c4:	01001d44 	movi	r4,117
    84c8:	11000d26 	beq	r2,r4,8500 <___vfprintf_internal_r+0x22c>
    84cc:	01001e04 	movi	r4,120
    84d0:	11000a26 	beq	r2,r4,84fc <___vfprintf_internal_r+0x228>
    84d4:	0000c606 	br	87f0 <___vfprintf_internal_r+0x51c>
    84d8:	e0800104 	addi	r2,fp,4
    84dc:	a8000826 	beq	r21,zero,8500 <___vfprintf_internal_r+0x22c>
    84e0:	d8800d15 	stw	r2,52(sp)
    84e4:	e7000017 	ldw	fp,0(fp)
    84e8:	e0000a0e 	bge	fp,zero,8514 <___vfprintf_internal_r+0x240>
    84ec:	05400044 	movi	r21,1
    84f0:	0739c83a 	sub	fp,zero,fp
    84f4:	a811883a 	mov	r8,r21
    84f8:	00000806 	br	851c <___vfprintf_internal_r+0x248>
    84fc:	05c00404 	movi	r23,16
    8500:	e0c00104 	addi	r3,fp,4
    8504:	d8c00d15 	stw	r3,52(sp)
    8508:	e7000017 	ldw	fp,0(fp)
    850c:	002b883a 	mov	r21,zero
    8510:	00000106 	br	8518 <___vfprintf_internal_r+0x244>
    8514:	05400044 	movi	r21,1
    8518:	0011883a 	mov	r8,zero
    851c:	0007883a 	mov	r3,zero
    8520:	d8ed883a 	add	r22,sp,r3
    8524:	e0001a26 	beq	fp,zero,8590 <___vfprintf_internal_r+0x2bc>
    8528:	e009883a 	mov	r4,fp
    852c:	b80b883a 	mov	r5,r23
    8530:	d8c01115 	stw	r3,68(sp)
    8534:	da001215 	stw	r8,72(sp)
    8538:	0008a8c0 	call	8a8c <__udivsi3>
    853c:	b809883a 	mov	r4,r23
    8540:	100b883a 	mov	r5,r2
    8544:	d8801015 	stw	r2,64(sp)
    8548:	0008a9c0 	call	8a9c <__mulsi3>
    854c:	e085c83a 	sub	r2,fp,r2
    8550:	01000244 	movi	r4,9
    8554:	d8c01117 	ldw	r3,68(sp)
    8558:	d9801017 	ldw	r6,64(sp)
    855c:	da001217 	ldw	r8,72(sp)
    8560:	20800216 	blt	r4,r2,856c <___vfprintf_internal_r+0x298>
    8564:	17000c04 	addi	fp,r2,48
    8568:	00000506 	br	8580 <___vfprintf_internal_r+0x2ac>
    856c:	d9000e17 	ldw	r4,56(sp)
    8570:	20000226 	beq	r4,zero,857c <___vfprintf_internal_r+0x2a8>
    8574:	17000dc4 	addi	fp,r2,55
    8578:	00000106 	br	8580 <___vfprintf_internal_r+0x2ac>
    857c:	170015c4 	addi	fp,r2,87
    8580:	b7000005 	stb	fp,0(r22)
    8584:	18c00044 	addi	r3,r3,1
    8588:	3039883a 	mov	fp,r6
    858c:	003fe406 	br	8520 <_gp+0xffff6cf8>
    8590:	b6c7c83a 	sub	r3,r22,sp
    8594:	d8c00a15 	stw	r3,40(sp)
    8598:	a0c7c83a 	sub	r3,r20,r3
    859c:	00c00e0e 	bge	zero,r3,85d8 <___vfprintf_internal_r+0x304>
    85a0:	b005883a 	mov	r2,r22
    85a4:	b0c9883a 	add	r4,r22,r3
    85a8:	01400c04 	movi	r5,48
    85ac:	d8c00917 	ldw	r3,36(sp)
    85b0:	10c0062e 	bgeu	r2,r3,85cc <___vfprintf_internal_r+0x2f8>
    85b4:	10c00044 	addi	r3,r2,1
    85b8:	11400005 	stb	r5,0(r2)
    85bc:	182d883a 	mov	r22,r3
    85c0:	19000326 	beq	r3,r4,85d0 <___vfprintf_internal_r+0x2fc>
    85c4:	1805883a 	mov	r2,r3
    85c8:	003ff806 	br	85ac <_gp+0xffff6d84>
    85cc:	102d883a 	mov	r22,r2
    85d0:	b6c7c83a 	sub	r3,r22,sp
    85d4:	d8c00a15 	stw	r3,40(sp)
    85d8:	d9000a17 	ldw	r4,40(sp)
    85dc:	2207883a 	add	r3,r4,r8
    85e0:	98f9c83a 	sub	fp,r19,r3
    85e4:	d8c00b17 	ldw	r3,44(sp)
    85e8:	18001726 	beq	r3,zero,8648 <___vfprintf_internal_r+0x374>
    85ec:	40000a26 	beq	r8,zero,8618 <___vfprintf_internal_r+0x344>
    85f0:	00800b44 	movi	r2,45
    85f4:	d8800805 	stb	r2,32(sp)
    85f8:	88800117 	ldw	r2,4(r17)
    85fc:	9009883a 	mov	r4,r18
    8600:	880b883a 	mov	r5,r17
    8604:	d9800804 	addi	r6,sp,32
    8608:	01c00044 	movi	r7,1
    860c:	103ee83a 	callr	r2
    8610:	10004a1e 	bne	r2,zero,873c <___vfprintf_internal_r+0x468>
    8614:	84000044 	addi	r16,r16,1
    8618:	0700070e 	bge	zero,fp,8638 <___vfprintf_internal_r+0x364>
    861c:	9009883a 	mov	r4,r18
    8620:	880b883a 	mov	r5,r17
    8624:	01800c04 	movi	r6,48
    8628:	e00f883a 	mov	r7,fp
    862c:	00082680 	call	8268 <print_repeat>
    8630:	1000421e 	bne	r2,zero,873c <___vfprintf_internal_r+0x468>
    8634:	8721883a 	add	r16,r16,fp
    8638:	d8c00a17 	ldw	r3,40(sp)
    863c:	85a1883a 	add	r16,r16,r22
    8640:	1db9c83a 	sub	fp,r3,r22
    8644:	00002006 	br	86c8 <___vfprintf_internal_r+0x3f4>
    8648:	0700090e 	bge	zero,fp,8670 <___vfprintf_internal_r+0x39c>
    864c:	9009883a 	mov	r4,r18
    8650:	880b883a 	mov	r5,r17
    8654:	01800804 	movi	r6,32
    8658:	e00f883a 	mov	r7,fp
    865c:	da001215 	stw	r8,72(sp)
    8660:	00082680 	call	8268 <print_repeat>
    8664:	da001217 	ldw	r8,72(sp)
    8668:	1000341e 	bne	r2,zero,873c <___vfprintf_internal_r+0x468>
    866c:	8721883a 	add	r16,r16,fp
    8670:	403ff126 	beq	r8,zero,8638 <_gp+0xffff6e10>
    8674:	00800b44 	movi	r2,45
    8678:	d8800805 	stb	r2,32(sp)
    867c:	88800117 	ldw	r2,4(r17)
    8680:	9009883a 	mov	r4,r18
    8684:	880b883a 	mov	r5,r17
    8688:	d9800804 	addi	r6,sp,32
    868c:	01c00044 	movi	r7,1
    8690:	103ee83a 	callr	r2
    8694:	1000291e 	bne	r2,zero,873c <___vfprintf_internal_r+0x468>
    8698:	84000044 	addi	r16,r16,1
    869c:	003fe606 	br	8638 <_gp+0xffff6e10>
    86a0:	b5bfffc4 	addi	r22,r22,-1
    86a4:	b0800003 	ldbu	r2,0(r22)
    86a8:	9009883a 	mov	r4,r18
    86ac:	880b883a 	mov	r5,r17
    86b0:	d8800805 	stb	r2,32(sp)
    86b4:	88800117 	ldw	r2,4(r17)
    86b8:	d9800804 	addi	r6,sp,32
    86bc:	01c00044 	movi	r7,1
    86c0:	103ee83a 	callr	r2
    86c4:	10001d1e 	bne	r2,zero,873c <___vfprintf_internal_r+0x468>
    86c8:	e587883a 	add	r3,fp,r22
    86cc:	8585c83a 	sub	r2,r16,r22
    86d0:	00fff316 	blt	zero,r3,86a0 <_gp+0xffff6e78>
    86d4:	1021883a 	mov	r16,r2
    86d8:	df000d17 	ldw	fp,52(sp)
    86dc:	00004406 	br	87f0 <___vfprintf_internal_r+0x51c>
    86e0:	01000044 	movi	r4,1
    86e4:	24c0080e 	bge	r4,r19,8708 <___vfprintf_internal_r+0x434>
    86e8:	9dbfffc4 	addi	r22,r19,-1
    86ec:	9009883a 	mov	r4,r18
    86f0:	880b883a 	mov	r5,r17
    86f4:	01800804 	movi	r6,32
    86f8:	b00f883a 	mov	r7,r22
    86fc:	00082680 	call	8268 <print_repeat>
    8700:	10000e1e 	bne	r2,zero,873c <___vfprintf_internal_r+0x468>
    8704:	85a1883a 	add	r16,r16,r22
    8708:	e0800017 	ldw	r2,0(fp)
    870c:	9009883a 	mov	r4,r18
    8710:	880b883a 	mov	r5,r17
    8714:	d8800005 	stb	r2,0(sp)
    8718:	88800117 	ldw	r2,4(r17)
    871c:	d80d883a 	mov	r6,sp
    8720:	01c00044 	movi	r7,1
    8724:	e5800104 	addi	r22,fp,4
    8728:	103ee83a 	callr	r2
    872c:	1000031e 	bne	r2,zero,873c <___vfprintf_internal_r+0x468>
    8730:	84000044 	addi	r16,r16,1
    8734:	b039883a 	mov	fp,r22
    8738:	00002d06 	br	87f0 <___vfprintf_internal_r+0x51c>
    873c:	00bfffc4 	movi	r2,-1
    8740:	00003406 	br	8814 <___vfprintf_internal_r+0x540>
    8744:	e5800017 	ldw	r22,0(fp)
    8748:	e0c00104 	addi	r3,fp,4
    874c:	d8c00a15 	stw	r3,40(sp)
    8750:	b009883a 	mov	r4,r22
    8754:	00089140 	call	8914 <strlen>
    8758:	9891c83a 	sub	r8,r19,r2
    875c:	1039883a 	mov	fp,r2
    8760:	0200090e 	bge	zero,r8,8788 <___vfprintf_internal_r+0x4b4>
    8764:	400f883a 	mov	r7,r8
    8768:	9009883a 	mov	r4,r18
    876c:	880b883a 	mov	r5,r17
    8770:	01800804 	movi	r6,32
    8774:	da001215 	stw	r8,72(sp)
    8778:	00082680 	call	8268 <print_repeat>
    877c:	da001217 	ldw	r8,72(sp)
    8780:	103fee1e 	bne	r2,zero,873c <_gp+0xffff6f14>
    8784:	8221883a 	add	r16,r16,r8
    8788:	88800117 	ldw	r2,4(r17)
    878c:	9009883a 	mov	r4,r18
    8790:	880b883a 	mov	r5,r17
    8794:	b00d883a 	mov	r6,r22
    8798:	e00f883a 	mov	r7,fp
    879c:	103ee83a 	callr	r2
    87a0:	103fe61e 	bne	r2,zero,873c <_gp+0xffff6f14>
    87a4:	8721883a 	add	r16,r16,fp
    87a8:	df000a17 	ldw	fp,40(sp)
    87ac:	00001006 	br	87f0 <___vfprintf_internal_r+0x51c>
    87b0:	05400044 	movi	r21,1
    87b4:	053fffc4 	movi	r20,-1
    87b8:	d8000e15 	stw	zero,56(sp)
    87bc:	05c00284 	movi	r23,10
    87c0:	a027883a 	mov	r19,r20
    87c4:	d8000c15 	stw	zero,48(sp)
    87c8:	d8000b15 	stw	zero,44(sp)
    87cc:	a82d883a 	mov	r22,r21
    87d0:	00000806 	br	87f4 <___vfprintf_internal_r+0x520>
    87d4:	dd800b15 	stw	r22,44(sp)
    87d8:	05800084 	movi	r22,2
    87dc:	00000506 	br	87f4 <___vfprintf_internal_r+0x520>
    87e0:	00c00044 	movi	r3,1
    87e4:	d8c00c15 	stw	r3,48(sp)
    87e8:	058000c4 	movi	r22,3
    87ec:	00000106 	br	87f4 <___vfprintf_internal_r+0x520>
    87f0:	002d883a 	mov	r22,zero
    87f4:	d8c00f17 	ldw	r3,60(sp)
    87f8:	18c00044 	addi	r3,r3,1
    87fc:	d8c00f15 	stw	r3,60(sp)
    8800:	003ece06 	br	833c <_gp+0xffff6b14>
    8804:	8005883a 	mov	r2,r16
    8808:	00000206 	br	8814 <___vfprintf_internal_r+0x540>
    880c:	05c00204 	movi	r23,8
    8810:	003f3b06 	br	8500 <_gp+0xffff6cd8>
    8814:	dfc01c17 	ldw	ra,112(sp)
    8818:	df001b17 	ldw	fp,108(sp)
    881c:	ddc01a17 	ldw	r23,104(sp)
    8820:	dd801917 	ldw	r22,100(sp)
    8824:	dd401817 	ldw	r21,96(sp)
    8828:	dd001717 	ldw	r20,92(sp)
    882c:	dcc01617 	ldw	r19,88(sp)
    8830:	dc801517 	ldw	r18,84(sp)
    8834:	dc401417 	ldw	r17,80(sp)
    8838:	dc001317 	ldw	r16,76(sp)
    883c:	dec01d04 	addi	sp,sp,116
    8840:	f800283a 	ret

00008844 <__vfprintf_internal>:
    8844:	2007883a 	mov	r3,r4
    8848:	01000074 	movhi	r4,1
    884c:	21260b04 	addi	r4,r4,-26580
    8850:	21000017 	ldw	r4,0(r4)
    8854:	2805883a 	mov	r2,r5
    8858:	300f883a 	mov	r7,r6
    885c:	180b883a 	mov	r5,r3
    8860:	100d883a 	mov	r6,r2
    8864:	00082d41 	jmpi	82d4 <___vfprintf_internal_r>

00008868 <__sfvwrite_small_dev>:
    8868:	2880000b 	ldhu	r2,0(r5)
    886c:	defffa04 	addi	sp,sp,-24
    8870:	dc000015 	stw	r16,0(sp)
    8874:	dfc00515 	stw	ra,20(sp)
    8878:	dd000415 	stw	r20,16(sp)
    887c:	dcc00315 	stw	r19,12(sp)
    8880:	dc800215 	stw	r18,8(sp)
    8884:	dc400115 	stw	r17,4(sp)
    8888:	1080020c 	andi	r2,r2,8
    888c:	2821883a 	mov	r16,r5
    8890:	10001726 	beq	r2,zero,88f0 <__sfvwrite_small_dev+0x88>
    8894:	2880008f 	ldh	r2,2(r5)
    8898:	10001216 	blt	r2,zero,88e4 <__sfvwrite_small_dev+0x7c>
    889c:	2027883a 	mov	r19,r4
    88a0:	3025883a 	mov	r18,r6
    88a4:	3823883a 	mov	r17,r7
    88a8:	05010004 	movi	r20,1024
    88ac:	04400b0e 	bge	zero,r17,88dc <__sfvwrite_small_dev+0x74>
    88b0:	8140008f 	ldh	r5,2(r16)
    88b4:	880f883a 	mov	r7,r17
    88b8:	a440010e 	bge	r20,r17,88c0 <__sfvwrite_small_dev+0x58>
    88bc:	01c10004 	movi	r7,1024
    88c0:	9809883a 	mov	r4,r19
    88c4:	900d883a 	mov	r6,r18
    88c8:	00089300 	call	8930 <_write_r>
    88cc:	0080050e 	bge	zero,r2,88e4 <__sfvwrite_small_dev+0x7c>
    88d0:	88a3c83a 	sub	r17,r17,r2
    88d4:	90a5883a 	add	r18,r18,r2
    88d8:	003ff406 	br	88ac <_gp+0xffff7084>
    88dc:	0005883a 	mov	r2,zero
    88e0:	00000406 	br	88f4 <__sfvwrite_small_dev+0x8c>
    88e4:	8080000b 	ldhu	r2,0(r16)
    88e8:	10801014 	ori	r2,r2,64
    88ec:	8080000d 	sth	r2,0(r16)
    88f0:	00bfffc4 	movi	r2,-1
    88f4:	dfc00517 	ldw	ra,20(sp)
    88f8:	dd000417 	ldw	r20,16(sp)
    88fc:	dcc00317 	ldw	r19,12(sp)
    8900:	dc800217 	ldw	r18,8(sp)
    8904:	dc400117 	ldw	r17,4(sp)
    8908:	dc000017 	ldw	r16,0(sp)
    890c:	dec00604 	addi	sp,sp,24
    8910:	f800283a 	ret

00008914 <strlen>:
    8914:	2005883a 	mov	r2,r4
    8918:	10c00007 	ldb	r3,0(r2)
    891c:	18000226 	beq	r3,zero,8928 <strlen+0x14>
    8920:	10800044 	addi	r2,r2,1
    8924:	003ffc06 	br	8918 <_gp+0xffff70f0>
    8928:	1105c83a 	sub	r2,r2,r4
    892c:	f800283a 	ret

00008930 <_write_r>:
    8930:	defffd04 	addi	sp,sp,-12
    8934:	dc400115 	stw	r17,4(sp)
    8938:	dc000015 	stw	r16,0(sp)
    893c:	2023883a 	mov	r17,r4
    8940:	04000074 	movhi	r16,1
    8944:	84264e04 	addi	r16,r16,-26312
    8948:	2809883a 	mov	r4,r5
    894c:	300b883a 	mov	r5,r6
    8950:	380d883a 	mov	r6,r7
    8954:	dfc00215 	stw	ra,8(sp)
    8958:	80000015 	stw	zero,0(r16)
    895c:	0008c740 	call	8c74 <write>
    8960:	00ffffc4 	movi	r3,-1
    8964:	10c0031e 	bne	r2,r3,8974 <_write_r+0x44>
    8968:	80c00017 	ldw	r3,0(r16)
    896c:	18000126 	beq	r3,zero,8974 <_write_r+0x44>
    8970:	88c00015 	stw	r3,0(r17)
    8974:	dfc00217 	ldw	ra,8(sp)
    8978:	dc400117 	ldw	r17,4(sp)
    897c:	dc000017 	ldw	r16,0(sp)
    8980:	dec00304 	addi	sp,sp,12
    8984:	f800283a 	ret

00008988 <udivmodsi4>:
    8988:	2900182e 	bgeu	r5,r4,89ec <udivmodsi4+0x64>
    898c:	28001716 	blt	r5,zero,89ec <udivmodsi4+0x64>
    8990:	00800804 	movi	r2,32
    8994:	00c00044 	movi	r3,1
    8998:	00000206 	br	89a4 <udivmodsi4+0x1c>
    899c:	10001126 	beq	r2,zero,89e4 <udivmodsi4+0x5c>
    89a0:	28000516 	blt	r5,zero,89b8 <udivmodsi4+0x30>
    89a4:	294b883a 	add	r5,r5,r5
    89a8:	10bfffc4 	addi	r2,r2,-1
    89ac:	18c7883a 	add	r3,r3,r3
    89b0:	293ffa36 	bltu	r5,r4,899c <_gp+0xffff7174>
    89b4:	18000b26 	beq	r3,zero,89e4 <udivmodsi4+0x5c>
    89b8:	0005883a 	mov	r2,zero
    89bc:	21400236 	bltu	r4,r5,89c8 <udivmodsi4+0x40>
    89c0:	2149c83a 	sub	r4,r4,r5
    89c4:	10c4b03a 	or	r2,r2,r3
    89c8:	1806d07a 	srli	r3,r3,1
    89cc:	280ad07a 	srli	r5,r5,1
    89d0:	183ffa1e 	bne	r3,zero,89bc <_gp+0xffff7194>
    89d4:	3000011e 	bne	r6,zero,89dc <udivmodsi4+0x54>
    89d8:	f800283a 	ret
    89dc:	2005883a 	mov	r2,r4
    89e0:	f800283a 	ret
    89e4:	0005883a 	mov	r2,zero
    89e8:	003ffa06 	br	89d4 <_gp+0xffff71ac>
    89ec:	00c00044 	movi	r3,1
    89f0:	0005883a 	mov	r2,zero
    89f4:	003ff106 	br	89bc <_gp+0xffff7194>

000089f8 <__divsi3>:
    89f8:	deffff04 	addi	sp,sp,-4
    89fc:	dfc00015 	stw	ra,0(sp)
    8a00:	20000916 	blt	r4,zero,8a28 <__divsi3+0x30>
    8a04:	000f883a 	mov	r7,zero
    8a08:	28000a16 	blt	r5,zero,8a34 <__divsi3+0x3c>
    8a0c:	000d883a 	mov	r6,zero
    8a10:	00089880 	call	8988 <udivmodsi4>
    8a14:	38000126 	beq	r7,zero,8a1c <__divsi3+0x24>
    8a18:	0085c83a 	sub	r2,zero,r2
    8a1c:	dfc00017 	ldw	ra,0(sp)
    8a20:	dec00104 	addi	sp,sp,4
    8a24:	f800283a 	ret
    8a28:	0109c83a 	sub	r4,zero,r4
    8a2c:	01c00044 	movi	r7,1
    8a30:	283ff60e 	bge	r5,zero,8a0c <_gp+0xffff71e4>
    8a34:	014bc83a 	sub	r5,zero,r5
    8a38:	39c0005c 	xori	r7,r7,1
    8a3c:	003ff306 	br	8a0c <_gp+0xffff71e4>

00008a40 <__modsi3>:
    8a40:	20000316 	blt	r4,zero,8a50 <__modsi3+0x10>
    8a44:	28000c16 	blt	r5,zero,8a78 <__modsi3+0x38>
    8a48:	01800044 	movi	r6,1
    8a4c:	00089881 	jmpi	8988 <udivmodsi4>
    8a50:	deffff04 	addi	sp,sp,-4
    8a54:	dfc00015 	stw	ra,0(sp)
    8a58:	0109c83a 	sub	r4,zero,r4
    8a5c:	28000916 	blt	r5,zero,8a84 <__modsi3+0x44>
    8a60:	01800044 	movi	r6,1
    8a64:	00089880 	call	8988 <udivmodsi4>
    8a68:	0085c83a 	sub	r2,zero,r2
    8a6c:	dfc00017 	ldw	ra,0(sp)
    8a70:	dec00104 	addi	sp,sp,4
    8a74:	f800283a 	ret
    8a78:	014bc83a 	sub	r5,zero,r5
    8a7c:	01800044 	movi	r6,1
    8a80:	00089881 	jmpi	8988 <udivmodsi4>
    8a84:	014bc83a 	sub	r5,zero,r5
    8a88:	003ff506 	br	8a60 <_gp+0xffff7238>

00008a8c <__udivsi3>:
    8a8c:	000d883a 	mov	r6,zero
    8a90:	00089881 	jmpi	8988 <udivmodsi4>

00008a94 <__umodsi3>:
    8a94:	01800044 	movi	r6,1
    8a98:	00089881 	jmpi	8988 <udivmodsi4>

00008a9c <__mulsi3>:
    8a9c:	0005883a 	mov	r2,zero
    8aa0:	20000726 	beq	r4,zero,8ac0 <__mulsi3+0x24>
    8aa4:	20c0004c 	andi	r3,r4,1
    8aa8:	2008d07a 	srli	r4,r4,1
    8aac:	18000126 	beq	r3,zero,8ab4 <__mulsi3+0x18>
    8ab0:	1145883a 	add	r2,r2,r5
    8ab4:	294b883a 	add	r5,r5,r5
    8ab8:	203ffa1e 	bne	r4,zero,8aa4 <_gp+0xffff727c>
    8abc:	f800283a 	ret
    8ac0:	f800283a 	ret

00008ac4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8ac4:	defffc04 	addi	sp,sp,-16
    8ac8:	df000315 	stw	fp,12(sp)
    8acc:	df000304 	addi	fp,sp,12
    8ad0:	e13ffd15 	stw	r4,-12(fp)
    8ad4:	e17ffe15 	stw	r5,-8(fp)
    8ad8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8adc:	e0fffe17 	ldw	r3,-8(fp)
    8ae0:	e0bffd17 	ldw	r2,-12(fp)
    8ae4:	18800c26 	beq	r3,r2,8b18 <alt_load_section+0x54>
  {
    while( to != end )
    8ae8:	00000806 	br	8b0c <alt_load_section+0x48>
    {
      *to++ = *from++;
    8aec:	e0bffe17 	ldw	r2,-8(fp)
    8af0:	10c00104 	addi	r3,r2,4
    8af4:	e0fffe15 	stw	r3,-8(fp)
    8af8:	e0fffd17 	ldw	r3,-12(fp)
    8afc:	19000104 	addi	r4,r3,4
    8b00:	e13ffd15 	stw	r4,-12(fp)
    8b04:	18c00017 	ldw	r3,0(r3)
    8b08:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8b0c:	e0fffe17 	ldw	r3,-8(fp)
    8b10:	e0bfff17 	ldw	r2,-4(fp)
    8b14:	18bff51e 	bne	r3,r2,8aec <_gp+0xffff72c4>
    {
      *to++ = *from++;
    }
  }
}
    8b18:	e037883a 	mov	sp,fp
    8b1c:	df000017 	ldw	fp,0(sp)
    8b20:	dec00104 	addi	sp,sp,4
    8b24:	f800283a 	ret

00008b28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8b28:	defffe04 	addi	sp,sp,-8
    8b2c:	dfc00115 	stw	ra,4(sp)
    8b30:	df000015 	stw	fp,0(sp)
    8b34:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8b38:	01000074 	movhi	r4,1
    8b3c:	21261004 	addi	r4,r4,-26560
    8b40:	01400074 	movhi	r5,1
    8b44:	2965d204 	addi	r5,r5,-26808
    8b48:	01800074 	movhi	r6,1
    8b4c:	31a61004 	addi	r6,r6,-26560
    8b50:	0008ac40 	call	8ac4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8b54:	01000074 	movhi	r4,1
    8b58:	21200804 	addi	r4,r4,-32736
    8b5c:	01400074 	movhi	r5,1
    8b60:	29600804 	addi	r5,r5,-32736
    8b64:	01800074 	movhi	r6,1
    8b68:	31a00804 	addi	r6,r6,-32736
    8b6c:	0008ac40 	call	8ac4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8b70:	01000074 	movhi	r4,1
    8b74:	21251a04 	addi	r4,r4,-27544
    8b78:	01400074 	movhi	r5,1
    8b7c:	29651a04 	addi	r5,r5,-27544
    8b80:	01800074 	movhi	r6,1
    8b84:	31a5d204 	addi	r6,r6,-26808
    8b88:	0008ac40 	call	8ac4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b8c:	00092600 	call	9260 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8b90:	00093fc0 	call	93fc <alt_icache_flush_all>
}
    8b94:	e037883a 	mov	sp,fp
    8b98:	dfc00117 	ldw	ra,4(sp)
    8b9c:	df000017 	ldw	fp,0(sp)
    8ba0:	dec00204 	addi	sp,sp,8
    8ba4:	f800283a 	ret

00008ba8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ba8:	defffe04 	addi	sp,sp,-8
    8bac:	dfc00115 	stw	ra,4(sp)
    8bb0:	df000015 	stw	fp,0(sp)
    8bb4:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8bb8:	0009883a 	mov	r4,zero
    8bbc:	0008d0c0 	call	8d0c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8bc0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8bc4:	0008d400 	call	8d40 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8bc8:	d1204517 	ldw	r4,-32492(gp)
    8bcc:	d0e04617 	ldw	r3,-32488(gp)
    8bd0:	d0a04717 	ldw	r2,-32484(gp)
    8bd4:	180b883a 	mov	r5,r3
    8bd8:	100d883a 	mov	r6,r2
    8bdc:	000805c0 	call	805c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8be0:	e037883a 	mov	sp,fp
    8be4:	dfc00117 	ldw	ra,4(sp)
    8be8:	df000017 	ldw	fp,0(sp)
    8bec:	dec00204 	addi	sp,sp,8
    8bf0:	f800283a 	ret

00008bf4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    8bf4:	defffd04 	addi	sp,sp,-12
    8bf8:	dfc00215 	stw	ra,8(sp)
    8bfc:	df000115 	stw	fp,4(sp)
    8c00:	df000104 	addi	fp,sp,4
    8c04:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    8c08:	e13fff17 	ldw	r4,-4(fp)
    8c0c:	000910c0 	call	910c <alt_busy_sleep>
}
    8c10:	e037883a 	mov	sp,fp
    8c14:	dfc00117 	ldw	ra,4(sp)
    8c18:	df000017 	ldw	fp,0(sp)
    8c1c:	dec00204 	addi	sp,sp,8
    8c20:	f800283a 	ret

00008c24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8c24:	defffe04 	addi	sp,sp,-8
    8c28:	dfc00115 	stw	ra,4(sp)
    8c2c:	df000015 	stw	fp,0(sp)
    8c30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8c34:	00800074 	movhi	r2,1
    8c38:	10a60f04 	addi	r2,r2,-26564
    8c3c:	10800017 	ldw	r2,0(r2)
    8c40:	10000526 	beq	r2,zero,8c58 <alt_get_errno+0x34>
    8c44:	00800074 	movhi	r2,1
    8c48:	10a60f04 	addi	r2,r2,-26564
    8c4c:	10800017 	ldw	r2,0(r2)
    8c50:	103ee83a 	callr	r2
    8c54:	00000206 	br	8c60 <alt_get_errno+0x3c>
    8c58:	00800074 	movhi	r2,1
    8c5c:	10a64e04 	addi	r2,r2,-26312
}
    8c60:	e037883a 	mov	sp,fp
    8c64:	dfc00117 	ldw	ra,4(sp)
    8c68:	df000017 	ldw	fp,0(sp)
    8c6c:	dec00204 	addi	sp,sp,8
    8c70:	f800283a 	ret

00008c74 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8c74:	defffb04 	addi	sp,sp,-20
    8c78:	dfc00415 	stw	ra,16(sp)
    8c7c:	df000315 	stw	fp,12(sp)
    8c80:	df000304 	addi	fp,sp,12
    8c84:	e13ffd15 	stw	r4,-12(fp)
    8c88:	e17ffe15 	stw	r5,-8(fp)
    8c8c:	e1bfff15 	stw	r6,-4(fp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8c90:	e0bffd17 	ldw	r2,-12(fp)
    8c94:	10c00060 	cmpeqi	r3,r2,1
    8c98:	1800031e 	bne	r3,zero,8ca8 <write+0x34>
    8c9c:	108000a0 	cmpeqi	r2,r2,2
    8ca0:	1000091e 	bne	r2,zero,8cc8 <write+0x54>
    8ca4:	00001006 	br	8ce8 <write+0x74>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    8ca8:	e0bfff17 	ldw	r2,-4(fp)
    8cac:	01000074 	movhi	r4,1
    8cb0:	21260c04 	addi	r4,r4,-26576
    8cb4:	e17ffe17 	ldw	r5,-8(fp)
    8cb8:	100d883a 	mov	r6,r2
    8cbc:	000f883a 	mov	r7,zero
    8cc0:	0008d5c0 	call	8d5c <altera_avalon_jtag_uart_write>
    8cc4:	00000c06 	br	8cf8 <write+0x84>
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8cc8:	e0bfff17 	ldw	r2,-4(fp)
    8ccc:	01000074 	movhi	r4,1
    8cd0:	21260c04 	addi	r4,r4,-26576
    8cd4:	e17ffe17 	ldw	r5,-8(fp)
    8cd8:	100d883a 	mov	r6,r2
    8cdc:	000f883a 	mov	r7,zero
    8ce0:	0008d5c0 	call	8d5c <altera_avalon_jtag_uart_write>
    8ce4:	00000406 	br	8cf8 <write+0x84>
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8ce8:	0008c240 	call	8c24 <alt_get_errno>
    8cec:	00c01444 	movi	r3,81
    8cf0:	10c00015 	stw	r3,0(r2)
        return -1;
    8cf4:	00bfffc4 	movi	r2,-1
    }
}
    8cf8:	e037883a 	mov	sp,fp
    8cfc:	dfc00117 	ldw	ra,4(sp)
    8d00:	df000017 	ldw	fp,0(sp)
    8d04:	dec00204 	addi	sp,sp,8
    8d08:	f800283a 	ret

00008d0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8d0c:	defffd04 	addi	sp,sp,-12
    8d10:	dfc00215 	stw	ra,8(sp)
    8d14:	df000115 	stw	fp,4(sp)
    8d18:	df000104 	addi	fp,sp,4
    8d1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8d20:	00094180 	call	9418 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8d24:	00800044 	movi	r2,1
    8d28:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8d2c:	e037883a 	mov	sp,fp
    8d30:	dfc00117 	ldw	ra,4(sp)
    8d34:	df000017 	ldw	fp,0(sp)
    8d38:	dec00204 	addi	sp,sp,8
    8d3c:	f800283a 	ret

00008d40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8d40:	deffff04 	addi	sp,sp,-4
    8d44:	df000015 	stw	fp,0(sp)
    8d48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( ONE_SEC_TIMER, one_sec_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    8d4c:	e037883a 	mov	sp,fp
    8d50:	df000017 	ldw	fp,0(sp)
    8d54:	dec00104 	addi	sp,sp,4
    8d58:	f800283a 	ret

00008d5c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8d5c:	defff904 	addi	sp,sp,-28
    8d60:	df000615 	stw	fp,24(sp)
    8d64:	df000604 	addi	fp,sp,24
    8d68:	e13ffc15 	stw	r4,-16(fp)
    8d6c:	e17ffd15 	stw	r5,-12(fp)
    8d70:	e1bffe15 	stw	r6,-8(fp)
    8d74:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8d78:	e0bffc17 	ldw	r2,-16(fp)
    8d7c:	10800017 	ldw	r2,0(r2)
    8d80:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    8d84:	e0bffe17 	ldw	r2,-8(fp)
    8d88:	e0fffd17 	ldw	r3,-12(fp)
    8d8c:	1885883a 	add	r2,r3,r2
    8d90:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    8d94:	00000e06 	br	8dd0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8d98:	e0bffa17 	ldw	r2,-24(fp)
    8d9c:	10800104 	addi	r2,r2,4
    8da0:	10800037 	ldwio	r2,0(r2)
    8da4:	10bfffec 	andhi	r2,r2,65535
    8da8:	10000926 	beq	r2,zero,8dd0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8dac:	e0fffa17 	ldw	r3,-24(fp)
    8db0:	e0bffd17 	ldw	r2,-12(fp)
    8db4:	11000044 	addi	r4,r2,1
    8db8:	e13ffd15 	stw	r4,-12(fp)
    8dbc:	10800003 	ldbu	r2,0(r2)
    8dc0:	10803fcc 	andi	r2,r2,255
    8dc4:	1080201c 	xori	r2,r2,128
    8dc8:	10bfe004 	addi	r2,r2,-128
    8dcc:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8dd0:	e0fffd17 	ldw	r3,-12(fp)
    8dd4:	e0bffb17 	ldw	r2,-20(fp)
    8dd8:	18bfef36 	bltu	r3,r2,8d98 <_gp+0xffff7570>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    8ddc:	e0bffe17 	ldw	r2,-8(fp)
}
    8de0:	e037883a 	mov	sp,fp
    8de4:	df000017 	ldw	fp,0(sp)
    8de8:	dec00104 	addi	sp,sp,4
    8dec:	f800283a 	ret

00008df0 <altera_modular_adc_init>:
#include "altera_modular_adc.h"

ALT_LLIST_HEAD(altera_modular_adc_list);

void altera_modular_adc_init(alt_modular_adc_dev* dev)
{
    8df0:	defffd04 	addi	sp,sp,-12
    8df4:	dfc00215 	stw	ra,8(sp)
    8df8:	df000115 	stw	fp,4(sp)
    8dfc:	df000104 	addi	fp,sp,4
    8e00:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
    8e04:	e13fff17 	ldw	r4,-4(fp)
    8e08:	d1600304 	addi	r5,gp,-32756
    8e0c:	00092cc0 	call	92cc <alt_dev_llist_insert>
}
    8e10:	e037883a 	mov	sp,fp
    8e14:	dfc00117 	ldw	ra,4(sp)
    8e18:	df000017 	ldw	fp,0(sp)
    8e1c:	dec00204 	addi	sp,sp,8
    8e20:	f800283a 	ret

00008e24 <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
    8e24:	defffc04 	addi	sp,sp,-16
    8e28:	dfc00315 	stw	ra,12(sp)
    8e2c:	df000215 	stw	fp,8(sp)
    8e30:	df000204 	addi	fp,sp,8
    8e34:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev;

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
    8e38:	e13fff17 	ldw	r4,-4(fp)
    8e3c:	d1600304 	addi	r5,gp,-32756
    8e40:	000936c0 	call	936c <alt_find_dev>
    8e44:	e0bffe15 	stw	r2,-8(fp)
    if (dev == NULL)
    8e48:	e0bffe17 	ldw	r2,-8(fp)
    8e4c:	1000021e 	bne	r2,zero,8e58 <altera_modular_adc_open+0x34>
        return NULL;
    8e50:	0005883a 	mov	r2,zero
    8e54:	00000106 	br	8e5c <altera_modular_adc_open+0x38>

    return dev;
    8e58:	e0bffe17 	ldw	r2,-8(fp)
}
    8e5c:	e037883a 	mov	sp,fp
    8e60:	dfc00117 	ldw	ra,4(sp)
    8e64:	df000017 	ldw	fp,0(sp)
    8e68:	dec00204 	addi	sp,sp,8
    8e6c:	f800283a 	ret

00008e70 <adc_stop>:

void adc_stop(int sequencer_base)
{
    8e70:	defffe04 	addi	sp,sp,-8
    8e74:	df000115 	stw	fp,4(sp)
    8e78:	df000104 	addi	fp,sp,4
    8e7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
    8e80:	e0bfff17 	ldw	r2,-4(fp)
    8e84:	e0ffff17 	ldw	r3,-4(fp)
    8e88:	19000037 	ldwio	r4,0(r3)
    8e8c:	00ffff84 	movi	r3,-2
    8e90:	20c6703a 	and	r3,r4,r3
    8e94:	10c00035 	stwio	r3,0(r2)
    8e98:	0001883a 	nop
    8e9c:	e0bfff17 	ldw	r2,-4(fp)
    8ea0:	10800037 	ldwio	r2,0(r2)
    8ea4:	1080004c 	andi	r2,r2,1
    8ea8:	103ffc1e 	bne	r2,zero,8e9c <_gp+0xffff7674>
}
    8eac:	e037883a 	mov	sp,fp
    8eb0:	df000017 	ldw	fp,0(sp)
    8eb4:	dec00104 	addi	sp,sp,4
    8eb8:	f800283a 	ret

00008ebc <adc_start>:

void adc_start(int sequencer_base)
{
    8ebc:	defffe04 	addi	sp,sp,-8
    8ec0:	df000115 	stw	fp,4(sp)
    8ec4:	df000104 	addi	fp,sp,4
    8ec8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
    8ecc:	e0bfff17 	ldw	r2,-4(fp)
    8ed0:	e0ffff17 	ldw	r3,-4(fp)
    8ed4:	18c00037 	ldwio	r3,0(r3)
    8ed8:	18c00054 	ori	r3,r3,1
    8edc:	10c00035 	stwio	r3,0(r2)
}
    8ee0:	e037883a 	mov	sp,fp
    8ee4:	df000017 	ldw	fp,0(sp)
    8ee8:	dec00104 	addi	sp,sp,4
    8eec:	f800283a 	ret

00008ef0 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
    8ef0:	defffe04 	addi	sp,sp,-8
    8ef4:	df000115 	stw	fp,4(sp)
    8ef8:	df000104 	addi	fp,sp,4
    8efc:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
    8f00:	e0bfff17 	ldw	r2,-4(fp)
    8f04:	e0ffff17 	ldw	r3,-4(fp)
    8f08:	19000037 	ldwio	r4,0(r3)
    8f0c:	00fffc44 	movi	r3,-15
    8f10:	20c6703a 	and	r3,r4,r3
    8f14:	18c00094 	ori	r3,r3,2
    8f18:	10c00035 	stwio	r3,0(r2)
}
    8f1c:	e037883a 	mov	sp,fp
    8f20:	df000017 	ldw	fp,0(sp)
    8f24:	dec00104 	addi	sp,sp,4
    8f28:	f800283a 	ret

00008f2c <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
    8f2c:	defffe04 	addi	sp,sp,-8
    8f30:	df000115 	stw	fp,4(sp)
    8f34:	df000104 	addi	fp,sp,4
    8f38:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
    8f3c:	e0bfff17 	ldw	r2,-4(fp)
    8f40:	e0ffff17 	ldw	r3,-4(fp)
    8f44:	19000037 	ldwio	r4,0(r3)
    8f48:	00fffc44 	movi	r3,-15
    8f4c:	20c6703a 	and	r3,r4,r3
    8f50:	10c00035 	stwio	r3,0(r2)
}
    8f54:	e037883a 	mov	sp,fp
    8f58:	df000017 	ldw	fp,0(sp)
    8f5c:	dec00104 	addi	sp,sp,4
    8f60:	f800283a 	ret

00008f64 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
    8f64:	defffc04 	addi	sp,sp,-16
    8f68:	dfc00315 	stw	ra,12(sp)
    8f6c:	df000215 	stw	fp,8(sp)
    8f70:	df000204 	addi	fp,sp,8
    8f74:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    8f78:	e0bfff17 	ldw	r2,-4(fp)
    8f7c:	10800037 	ldwio	r2,0(r2)
    8f80:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
    8f84:	e13fff17 	ldw	r4,-4(fp)
    8f88:	0008e700 	call	8e70 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    8f8c:	e0bfff17 	ldw	r2,-4(fp)
    8f90:	e0ffff17 	ldw	r3,-4(fp)
    8f94:	18c00037 	ldwio	r3,0(r3)
    8f98:	18c00394 	ori	r3,r3,14
    8f9c:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
    8fa0:	e13fff17 	ldw	r4,-4(fp)
    8fa4:	0008ebc0 	call	8ebc <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
    8fa8:	0001883a 	nop
    8fac:	e0bfff17 	ldw	r2,-4(fp)
    8fb0:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    8fb4:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
    8fb8:	103ffc1e 	bne	r2,zero,8fac <_gp+0xffff7784>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
    8fbc:	e0bfff17 	ldw	r2,-4(fp)
    8fc0:	e0fffe17 	ldw	r3,-8(fp)
    8fc4:	10c00035 	stwio	r3,0(r2)
}
    8fc8:	e037883a 	mov	sp,fp
    8fcc:	dfc00117 	ldw	ra,4(sp)
    8fd0:	df000017 	ldw	fp,0(sp)
    8fd4:	dec00204 	addi	sp,sp,8
    8fd8:	f800283a 	ret

00008fdc <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
    8fdc:	defffe04 	addi	sp,sp,-8
    8fe0:	df000115 	stw	fp,4(sp)
    8fe4:	df000104 	addi	fp,sp,4
    8fe8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
    8fec:	e0bfff17 	ldw	r2,-4(fp)
    8ff0:	10804004 	addi	r2,r2,256
    8ff4:	e0ffff17 	ldw	r3,-4(fp)
    8ff8:	18c04004 	addi	r3,r3,256
    8ffc:	18c00037 	ldwio	r3,0(r3)
    9000:	18c00054 	ori	r3,r3,1
    9004:	10c00035 	stwio	r3,0(r2)
}
    9008:	e037883a 	mov	sp,fp
    900c:	df000017 	ldw	fp,0(sp)
    9010:	dec00104 	addi	sp,sp,4
    9014:	f800283a 	ret

00009018 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
    9018:	defffe04 	addi	sp,sp,-8
    901c:	df000115 	stw	fp,4(sp)
    9020:	df000104 	addi	fp,sp,4
    9024:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
    9028:	e0bfff17 	ldw	r2,-4(fp)
    902c:	10804004 	addi	r2,r2,256
    9030:	e0ffff17 	ldw	r3,-4(fp)
    9034:	18c04004 	addi	r3,r3,256
    9038:	19000037 	ldwio	r4,0(r3)
    903c:	00ffff84 	movi	r3,-2
    9040:	20c6703a 	and	r3,r4,r3
    9044:	10c00035 	stwio	r3,0(r2)
}
    9048:	e037883a 	mov	sp,fp
    904c:	df000017 	ldw	fp,0(sp)
    9050:	dec00104 	addi	sp,sp,4
    9054:	f800283a 	ret

00009058 <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
    9058:	defffe04 	addi	sp,sp,-8
    905c:	df000115 	stw	fp,4(sp)
    9060:	df000104 	addi	fp,sp,4
    9064:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
    9068:	e0bfff17 	ldw	r2,-4(fp)
    906c:	10804104 	addi	r2,r2,260
    9070:	e0ffff17 	ldw	r3,-4(fp)
    9074:	18c04104 	addi	r3,r3,260
    9078:	18c00037 	ldwio	r3,0(r3)
    907c:	18c00054 	ori	r3,r3,1
    9080:	10c00035 	stwio	r3,0(r2)
}
    9084:	e037883a 	mov	sp,fp
    9088:	df000017 	ldw	fp,0(sp)
    908c:	dec00104 	addi	sp,sp,4
    9090:	f800283a 	ret

00009094 <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
    9094:	defffe04 	addi	sp,sp,-8
    9098:	df000115 	stw	fp,4(sp)
    909c:	df000104 	addi	fp,sp,4
    90a0:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
    90a4:	e0bfff17 	ldw	r2,-4(fp)
    90a8:	10804104 	addi	r2,r2,260
    90ac:	10800037 	ldwio	r2,0(r2)
    90b0:	1080004c 	andi	r2,r2,1
    90b4:	10000226 	beq	r2,zero,90c0 <adc_interrupt_asserted+0x2c>
    90b8:	00bfffc4 	movi	r2,-1
    90bc:	00000106 	br	90c4 <adc_interrupt_asserted+0x30>
    90c0:	0005883a 	mov	r2,zero
}
    90c4:	e037883a 	mov	sp,fp
    90c8:	df000017 	ldw	fp,0(sp)
    90cc:	dec00104 	addi	sp,sp,4
    90d0:	f800283a 	ret

000090d4 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
    90d4:	defffe04 	addi	sp,sp,-8
    90d8:	df000115 	stw	fp,4(sp)
    90dc:	df000104 	addi	fp,sp,4
    90e0:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
    90e4:	0001883a 	nop
    90e8:	e0bfff17 	ldw	r2,-4(fp)
    90ec:	10804104 	addi	r2,r2,260
    90f0:	10800037 	ldwio	r2,0(r2)
    90f4:	1080004c 	andi	r2,r2,1
    90f8:	103ffb26 	beq	r2,zero,90e8 <_gp+0xffff78c0>
}
    90fc:	e037883a 	mov	sp,fp
    9100:	df000017 	ldw	fp,0(sp)
    9104:	dec00104 	addi	sp,sp,4
    9108:	f800283a 	ret

0000910c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    910c:	defffa04 	addi	sp,sp,-24
    9110:	dfc00515 	stw	ra,20(sp)
    9114:	df000415 	stw	fp,16(sp)
    9118:	df000404 	addi	fp,sp,16
    911c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    9120:	00800244 	movi	r2,9
    9124:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    9128:	e13ffd17 	ldw	r4,-12(fp)
    912c:	014003f4 	movhi	r5,15
    9130:	29509004 	addi	r5,r5,16960
    9134:	0008a9c0 	call	8a9c <__mulsi3>
    9138:	0100bef4 	movhi	r4,763
    913c:	213c2004 	addi	r4,r4,-3968
    9140:	100b883a 	mov	r5,r2
    9144:	0008a8c0 	call	8a8c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9148:	01200034 	movhi	r4,32768
    914c:	213fffc4 	addi	r4,r4,-1
    9150:	100b883a 	mov	r5,r2
    9154:	0008a8c0 	call	8a8c <__udivsi3>
    9158:	e13fff17 	ldw	r4,-4(fp)
    915c:	100b883a 	mov	r5,r2
    9160:	0008a8c0 	call	8a8c <__udivsi3>
    9164:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    9168:	e0bffe17 	ldw	r2,-8(fp)
    916c:	10002926 	beq	r2,zero,9214 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    9170:	e03ffc15 	stw	zero,-16(fp)
    9174:	00001606 	br	91d0 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9178:	00a00034 	movhi	r2,32768
    917c:	10bfffc4 	addi	r2,r2,-1
    9180:	10bfffc4 	addi	r2,r2,-1
    9184:	103ffe1e 	bne	r2,zero,9180 <_gp+0xffff7958>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    9188:	e13ffd17 	ldw	r4,-12(fp)
    918c:	014003f4 	movhi	r5,15
    9190:	29509004 	addi	r5,r5,16960
    9194:	0008a9c0 	call	8a9c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9198:	0100bef4 	movhi	r4,763
    919c:	213c2004 	addi	r4,r4,-3968
    91a0:	100b883a 	mov	r5,r2
    91a4:	0008a8c0 	call	8a8c <__udivsi3>
    91a8:	01200034 	movhi	r4,32768
    91ac:	213fffc4 	addi	r4,r4,-1
    91b0:	100b883a 	mov	r5,r2
    91b4:	0008a8c0 	call	8a8c <__udivsi3>
    91b8:	e0ffff17 	ldw	r3,-4(fp)
    91bc:	1885c83a 	sub	r2,r3,r2
    91c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    91c4:	e0bffc17 	ldw	r2,-16(fp)
    91c8:	10800044 	addi	r2,r2,1
    91cc:	e0bffc15 	stw	r2,-16(fp)
    91d0:	e0fffc17 	ldw	r3,-16(fp)
    91d4:	e0bffe17 	ldw	r2,-8(fp)
    91d8:	18bfe716 	blt	r3,r2,9178 <_gp+0xffff7950>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    91dc:	e13ffd17 	ldw	r4,-12(fp)
    91e0:	014003f4 	movhi	r5,15
    91e4:	29509004 	addi	r5,r5,16960
    91e8:	0008a9c0 	call	8a9c <__mulsi3>
    91ec:	0100bef4 	movhi	r4,763
    91f0:	213c2004 	addi	r4,r4,-3968
    91f4:	100b883a 	mov	r5,r2
    91f8:	0008a8c0 	call	8a8c <__udivsi3>
    91fc:	1009883a 	mov	r4,r2
    9200:	e17fff17 	ldw	r5,-4(fp)
    9204:	0008a9c0 	call	8a9c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9208:	10bfffc4 	addi	r2,r2,-1
    920c:	103ffe1e 	bne	r2,zero,9208 <_gp+0xffff79e0>
    9210:	00000d06 	br	9248 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9214:	e13ffd17 	ldw	r4,-12(fp)
    9218:	014003f4 	movhi	r5,15
    921c:	29509004 	addi	r5,r5,16960
    9220:	0008a9c0 	call	8a9c <__mulsi3>
    9224:	0100bef4 	movhi	r4,763
    9228:	213c2004 	addi	r4,r4,-3968
    922c:	100b883a 	mov	r5,r2
    9230:	0008a8c0 	call	8a8c <__udivsi3>
    9234:	1009883a 	mov	r4,r2
    9238:	e17fff17 	ldw	r5,-4(fp)
    923c:	0008a9c0 	call	8a9c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9240:	10bfffc4 	addi	r2,r2,-1
    9244:	00bffe16 	blt	zero,r2,9240 <_gp+0xffff7a18>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9248:	0005883a 	mov	r2,zero
}
    924c:	e037883a 	mov	sp,fp
    9250:	dfc00117 	ldw	ra,4(sp)
    9254:	df000017 	ldw	fp,0(sp)
    9258:	dec00204 	addi	sp,sp,8
    925c:	f800283a 	ret

00009260 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9260:	deffff04 	addi	sp,sp,-4
    9264:	df000015 	stw	fp,0(sp)
    9268:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    926c:	e037883a 	mov	sp,fp
    9270:	df000017 	ldw	fp,0(sp)
    9274:	dec00104 	addi	sp,sp,4
    9278:	f800283a 	ret

0000927c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    927c:	defffe04 	addi	sp,sp,-8
    9280:	dfc00115 	stw	ra,4(sp)
    9284:	df000015 	stw	fp,0(sp)
    9288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    928c:	00800074 	movhi	r2,1
    9290:	10a60f04 	addi	r2,r2,-26564
    9294:	10800017 	ldw	r2,0(r2)
    9298:	10000526 	beq	r2,zero,92b0 <alt_get_errno+0x34>
    929c:	00800074 	movhi	r2,1
    92a0:	10a60f04 	addi	r2,r2,-26564
    92a4:	10800017 	ldw	r2,0(r2)
    92a8:	103ee83a 	callr	r2
    92ac:	00000206 	br	92b8 <alt_get_errno+0x3c>
    92b0:	00800074 	movhi	r2,1
    92b4:	10a64e04 	addi	r2,r2,-26312
}
    92b8:	e037883a 	mov	sp,fp
    92bc:	dfc00117 	ldw	ra,4(sp)
    92c0:	df000017 	ldw	fp,0(sp)
    92c4:	dec00204 	addi	sp,sp,8
    92c8:	f800283a 	ret

000092cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    92cc:	defffa04 	addi	sp,sp,-24
    92d0:	dfc00515 	stw	ra,20(sp)
    92d4:	df000415 	stw	fp,16(sp)
    92d8:	df000404 	addi	fp,sp,16
    92dc:	e13ffe15 	stw	r4,-8(fp)
    92e0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    92e4:	e0bffe17 	ldw	r2,-8(fp)
    92e8:	10000326 	beq	r2,zero,92f8 <alt_dev_llist_insert+0x2c>
    92ec:	e0bffe17 	ldw	r2,-8(fp)
    92f0:	10800217 	ldw	r2,8(r2)
    92f4:	1000051e 	bne	r2,zero,930c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    92f8:	000927c0 	call	927c <alt_get_errno>
    92fc:	00c00584 	movi	r3,22
    9300:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    9304:	00bffa84 	movi	r2,-22
    9308:	00001306 	br	9358 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    930c:	e0bffe17 	ldw	r2,-8(fp)
    9310:	e0ffff17 	ldw	r3,-4(fp)
    9314:	e0fffc15 	stw	r3,-16(fp)
    9318:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    931c:	e0bffd17 	ldw	r2,-12(fp)
    9320:	e0fffc17 	ldw	r3,-16(fp)
    9324:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9328:	e0bffc17 	ldw	r2,-16(fp)
    932c:	10c00017 	ldw	r3,0(r2)
    9330:	e0bffd17 	ldw	r2,-12(fp)
    9334:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9338:	e0bffc17 	ldw	r2,-16(fp)
    933c:	10800017 	ldw	r2,0(r2)
    9340:	e0fffd17 	ldw	r3,-12(fp)
    9344:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9348:	e0bffc17 	ldw	r2,-16(fp)
    934c:	e0fffd17 	ldw	r3,-12(fp)
    9350:	10c00015 	stw	r3,0(r2)

  return 0;  
    9354:	0005883a 	mov	r2,zero
}
    9358:	e037883a 	mov	sp,fp
    935c:	dfc00117 	ldw	ra,4(sp)
    9360:	df000017 	ldw	fp,0(sp)
    9364:	dec00204 	addi	sp,sp,8
    9368:	f800283a 	ret

0000936c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    936c:	defffa04 	addi	sp,sp,-24
    9370:	dfc00515 	stw	ra,20(sp)
    9374:	df000415 	stw	fp,16(sp)
    9378:	df000404 	addi	fp,sp,16
    937c:	e13ffe15 	stw	r4,-8(fp)
    9380:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9384:	e0bfff17 	ldw	r2,-4(fp)
    9388:	10800017 	ldw	r2,0(r2)
    938c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9390:	e13ffe17 	ldw	r4,-8(fp)
    9394:	00089140 	call	8914 <strlen>
    9398:	10800044 	addi	r2,r2,1
    939c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    93a0:	00000d06 	br	93d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    93a4:	e0bffc17 	ldw	r2,-16(fp)
    93a8:	10c00217 	ldw	r3,8(r2)
    93ac:	e0bffd17 	ldw	r2,-12(fp)
    93b0:	1809883a 	mov	r4,r3
    93b4:	e17ffe17 	ldw	r5,-8(fp)
    93b8:	100d883a 	mov	r6,r2
    93bc:	00094380 	call	9438 <memcmp>
    93c0:	1000021e 	bne	r2,zero,93cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    93c4:	e0bffc17 	ldw	r2,-16(fp)
    93c8:	00000706 	br	93e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    93cc:	e0bffc17 	ldw	r2,-16(fp)
    93d0:	10800017 	ldw	r2,0(r2)
    93d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    93d8:	e0fffc17 	ldw	r3,-16(fp)
    93dc:	e0bfff17 	ldw	r2,-4(fp)
    93e0:	18bff01e 	bne	r3,r2,93a4 <_gp+0xffff7b7c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    93e4:	0005883a 	mov	r2,zero
}
    93e8:	e037883a 	mov	sp,fp
    93ec:	dfc00117 	ldw	ra,4(sp)
    93f0:	df000017 	ldw	fp,0(sp)
    93f4:	dec00204 	addi	sp,sp,8
    93f8:	f800283a 	ret

000093fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    93fc:	deffff04 	addi	sp,sp,-4
    9400:	df000015 	stw	fp,0(sp)
    9404:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9408:	e037883a 	mov	sp,fp
    940c:	df000017 	ldw	fp,0(sp)
    9410:	dec00104 	addi	sp,sp,4
    9414:	f800283a 	ret

00009418 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9418:	deffff04 	addi	sp,sp,-4
    941c:	df000015 	stw	fp,0(sp)
    9420:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9424:	000170fa 	wrctl	ienable,zero
}
    9428:	e037883a 	mov	sp,fp
    942c:	df000017 	ldw	fp,0(sp)
    9430:	dec00104 	addi	sp,sp,4
    9434:	f800283a 	ret

00009438 <memcmp>:
    9438:	218d883a 	add	r6,r4,r6
    943c:	21800826 	beq	r4,r6,9460 <memcmp+0x28>
    9440:	20c00003 	ldbu	r3,0(r4)
    9444:	28800003 	ldbu	r2,0(r5)
    9448:	18800226 	beq	r3,r2,9454 <memcmp+0x1c>
    944c:	1885c83a 	sub	r2,r3,r2
    9450:	f800283a 	ret
    9454:	21000044 	addi	r4,r4,1
    9458:	29400044 	addi	r5,r5,1
    945c:	003ff706 	br	943c <_gp+0xffff7c14>
    9460:	0005883a 	mov	r2,zero
    9464:	f800283a 	ret
